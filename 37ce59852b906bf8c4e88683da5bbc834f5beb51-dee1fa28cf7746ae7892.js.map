{"version":3,"sources":["webpack:///./src/components/gallery-article.js","webpack:///./src/components/writings-gallery.js","webpack:///./src/components/post-link.js","webpack:///./src/components/tag-image.js","webpack:///./src/components/tag-item.js","webpack:///./src/components/tags-component.js","webpack:///./src/components/latest-writings-item.js","webpack:///./src/components/latest-writings.js","webpack:///./src/components/image-face.js"],"names":["GalleryArticle","post","type","className","frontmatter","tags","map","tag","key","to","kebabCase","path","title","date","fields","readingTime","text","featuredImage","sizes","childImageSharp","style","margin","width","summary","excerpt","types","query","render","data","allMarkdownRemark","edges","filter","edge","node","index","id","TagImage","tagName","console","log","fluid","hciPlaceholderImage","devPlaceholderImage","researchPlaceholderImage","descriptions","TagComponent","tagCount","group","fieldValue","totalCount","LatestWritingsItem","maxWidth","ImageFace","placeholderImage"],"mappings":"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","file":"37ce59852b906bf8c4e88683da5bbc834f5beb51-dee1fa28cf7746ae7892.js","sourcesContent":["import React from \"react\"\nimport Img from \"gatsby-image\"\nimport { Link } from \"gatsby\"\nimport { BackgroundImage } from \"gatsby-background-image\"\nimport kebabCase from \"lodash/kebabCase\"\n\nconst GalleryArticle = ({ post, type }) => (\n\n  <article className={\"archive-article-item \" + \"gallery-item-\" + type}>\n\n    {type === 'title-and-image' && (\n      <>\n        <div>\n          {post.frontmatter.tags !== null && (\n            post.frontmatter.tags.map(tag => {\n              return <div className=\"archive-article-item-topic\" key={\"gallery-article-item-topic\" + tag}><Link to={`/tags/${kebabCase(tag)}/`}>\n                {\"\" + tag}\n              </Link></div>\n            }))}\n          <Link to={post.frontmatter.path}>\n            <h3>{post.frontmatter.title}</h3>\n          </Link>\n          <div className=\"archive-article-item-summary-read-more\">\n            <span>\n              {post.frontmatter.date}\n              {\", \" + post.fields.readingTime.text}\n            </span>\n          </div>\n        </div>\n\n        <div className=\"archive-article-item-image\">\n\n          {post.frontmatter.featuredImage !== null && (\n            <Img\n              sizes={post.frontmatter.featuredImage.childImageSharp.sizes}\n              style={{ margin: 'auto auto', width: '96px' }}\n            />\n          )}\n\n        </div>\n      </>\n    )}\n\n    {type === 'title-and-text' && (\n      <>\n        <div>\n          {post.frontmatter.tags !== null && (\n            post.frontmatter.tags.map(tag => {\n              return <div className=\"archive-article-item-topic\" key={\"gallery-article-item-topic\" + tag}><Link to={`/tags/${kebabCase(tag)}/`}>\n                {\"\" + tag}\n              </Link></div>\n            }))}\n          <Link to={post.frontmatter.path}>\n            <h3>{post.frontmatter.title}</h3>\n          </Link>\n          {post.frontmatter.summary !== null && (<p className=\"archive-article-item-summary\">{post.frontmatter.summary}</p>)}\n          {post.frontmatter.summary === null && (<p className=\"archive-article-item-summary\">{post.excerpt}</p>)}\n\n          <div className=\"archive-article-item-summary-read-more\">\n            <span>\n              {post.frontmatter.date}\n              {\", \" + post.fields.readingTime.text}\n            </span>\n          </div>\n        </div>\n\n      </>\n    )}\n\n    {type === 'quote' && (\n      <>\n        <div>\n         \n          {post.frontmatter.summary !== null && (<blockquote className=\"archive-article-item-quote\">{post.frontmatter.summary}</blockquote>)}\n          {post.frontmatter.summary === null && (<blockquote className=\"archive-article-item-quote\">{post.excerpt}</blockquote>)}\n\n          <div className=\"archive-article-item-summary-read-more\">\n          <Link to={post.frontmatter.path}>\n            <span>{post.frontmatter.title + \" \"}</span>\n          </Link>\n           <span>\n                {post.frontmatter.date}\n                {\", \" + post.fields.readingTime.text + \" \"}\n              </span>\n              \n          </div>\n        </div>\n\n      </>\n    )}\n  </article>\n)\nexport default GalleryArticle\n","import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\nimport PostLink from \"../components/post-link\"\nimport Layout from \"../components/layout\"\nimport GalleryArticle from \"./gallery-article\"\n\nvar types = [\"title-and-image\", \"title-and-image\", \"title-and-image\", \"title-and-image\", \"title-and-image\", \"title-and-image\", \"title-and-image\",\"title-and-image\",\"title-and-image\", \"title-and-image\"];\n\nexport default () => (\n  <StaticQuery\n    query={graphql`\n    query {\n        allMarkdownRemark(skip: 2, limit: 10, sort: { order: DESC, fields: [frontmatter___date] }) {\n          edges {\n            node {\n              id\n              excerpt(pruneLength: 250)\n              frontmatter {\n                date(formatString: \"MMMM DD, YYYY\")\n                type\n                path\n                title\n                tags\n                summary\n                featuredImage {\n                    childImageSharp {\n                        sizes(maxWidth: 250) {\n                        ...GatsbyImageSharpSizes\n                        }\n                    }\n                }\n              }\n              fields {\n                slug\n                readingTime {\n                  text\n                }\n              }\n            }\n          }\n        }\n      }     \n    `}\n    render={ data => (\n                data.allMarkdownRemark.edges\n                    .filter(edge => !!edge.node.frontmatter.date) // You can filter your posts based on some criteria\n                    .filter(edge => edge.node.frontmatter.type !== \"graphical-page\")\n                    .map( (edge, index) => <GalleryArticle key={edge.node.id} post={edge.node} type={types[index]} />)\n    )}\n    \n  />\n)\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst PostLink = ({ post }) => (\n  <div>\n    <Link to={post.frontmatter.path}>\n      {post.frontmatter.title} ({post.frontmatter.date})\n    </Link>\n  </div>\n)\nexport default PostLink\n","import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `useStaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.dev/gatsby-image\n * - `useStaticQuery`: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nconst TagImage = ({tagName}) => {\n  const data = useStaticQuery(graphql`\n    query {\n      hciPlaceholderImage: file(relativePath: { eq: \"hci-placeholder.png\" }) {\n        childImageSharp {\n          fluid(maxWidth: 96) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n      devPlaceholderImage: file(relativePath: { eq: \"dev-placeholder.png\" }) {\n        childImageSharp {\n          fluid(maxWidth: 96) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n      researchPlaceholderImage: file(relativePath: { eq: \"research-placeholder.png\" }) {\n        childImageSharp {\n          fluid(maxWidth: 96) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  `)\n\n  return <div className=\"tag-image\">\n    {console.log(tagName)}\n    {tagName === 'hci' && \n      <Img fluid={data.hciPlaceholderImage.childImageSharp.fluid}  />\n    }\n    {tagName === 'dev' && \n      <Img fluid={data.devPlaceholderImage.childImageSharp.fluid}  />\n    } \n    {tagName === 'research' && \n      <Img fluid={data.researchPlaceholderImage.childImageSharp.fluid}  />\n    } \n    </div>\n}\n\nexport default TagImage\n","import React from \"react\"\nimport Img from \"gatsby-image\"\nimport { Link } from \"gatsby\"\nimport { BackgroundImage } from \"gatsby-background-image\"\nimport kebabCase from \"lodash/kebabCase\"\nimport TagImage from \"./tag-image\"\n\nvar descriptions = {\n    \"hci\": \"Human-computer interaction, from professional application point of view.\",\n    \"research\": \"Things related to my research or information gathering / overload.\",\n    \"dev\": \"Usually these are about the less technical aspects of software development.\"\n}\nconst TagComponent = ({ tagName, tagCount }) => (\n<div className=\"tag-item\" key={tagName}>\n    <div className=\"tag-link\">\n        <Link to={`/tags/${kebabCase(tagName)}/`}>\n            {tagName} ({tagCount})\n        </Link>\n        \n    </div>\n    <TagImage tagName={tagName}/>\n    \n    <p>{descriptions[tagName]}</p>\n</div>\n)\nexport default TagComponent\n","import React from \"react\"\n\nimport { graphql, StaticQuery } from \"gatsby\"\nimport TagComponent from \"./tag-item\"\n\nexport default () => (\n  <div className=\"archive-tags-container\">\n    <h3>Tags</h3>\n  <div className=\"archive-tags\">\n    \n    <StaticQuery\n    query={graphql`\n    query {\n        allMarkdownRemark(limit: 2000) {\n          group(field: frontmatter___tags) {\n            fieldValue\n            totalCount\n          }\n        }\n      }\n    `}\n\n    render=\n      {data => (\n                data.allMarkdownRemark.group\n                    .map(edge => <TagComponent key={edge.fieldValue} tagName={edge.fieldValue} tagCount={edge.totalCount} />) \n    )}\n    \n  />\n  </div>\n  </div>\n)","import React from \"react\"\nimport Img from \"gatsby-image\"\nimport { Link } from \"gatsby\"\nimport BackgroundImage from \"gatsby-background-image\"\nimport kebabCase from \"lodash/kebabCase\"\n\nconst LatestWritingsItem = ({ post }) => (\n\n  <article className=\"latest-writings-item\" key={post.frontmatter.title}>\n      <div>\n      <div className=\"latest-writings-item-summary-read-more\">\n          {post.frontmatter.tags !== null && ( \n        post.frontmatter.tags.map( tag => {\n          return <span key={\"link-to-\"+tag}><Link to={`/tags/${kebabCase(tag)}/`}>\n                  {\"\" + tag}\n                </Link></span>\n        }))\n      }\n    </div>\n        <Link className=\"latest-writings-item-title\" to={post.frontmatter.path}>\n          <h3>{post.frontmatter.title}</h3>\n        </Link>\n        <div>\n            <p className=\"latest-writing-item-date\">\n              <strong>{post.frontmatter.date}</strong>{\", \" + post.fields.readingTime.text}\n            </p>\n          </div>\n        {post.frontmatter.summary !== null && (<p className=\"latest-writings-item-summary\">{post.frontmatter.summary}</p>)} \n        {post.frontmatter.summary === null && (<p className=\"latest-writings-item-summary\">{post.excerpt}</p>)} \n        {post.frontmatter.featuredImage !== null && (\n            <Img \n                sizes={post.frontmatter.featuredImage.childImageSharp.sizes}\n                style={{margin: 'auto auto', width: '100%', maxWidth: '400px'}}\n              />\n            )}\n      </div>\n  </article>\n)\nexport default LatestWritingsItem\n","import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\nimport PostLink from \"../components/post-link\"\nimport Layout from \"../components/layout\"\nimport LatestWritingsItem from \"./latest-writings-item\"\n\nexport default () => (\n  <StaticQuery\n    query={graphql`\n    query {\n        allMarkdownRemark( limit: 2, sort: { order: DESC, fields: [frontmatter___date] }) {\n          edges {\n            node {\n              id\n              excerpt(pruneLength: 250)\n              frontmatter {\n                date(formatString: \"MMMM DD, YYYY\")\n                type\n                path                \n                title\n                tags\n                summary\n                featuredImage {\n                    childImageSharp {\n                        sizes(maxWidth: 800) {\n                        ...GatsbyImageSharpSizes\n                        }\n                        fluid(maxWidth: 800, quality: 100) {\n                          ...GatsbyImageSharpFluid\n                          ...GatsbyImageSharpFluidLimitPresentationSize\n                          \n                        }\n                    }\n                    \n                }\n              }\n              fields {\n                slug\n                readingTime {\n                  text\n                }\n              }\n            }\n          }\n        }\n      }     \n    `}\n\n    render={data => (\n                data.allMarkdownRemark.edges\n                    .filter(edge => !!edge.node.frontmatter.date) // You can filter your posts based on some criteria\n                    .filter(edge => edge.node.frontmatter.type !== \"graphical-page\")\n                    .map(edge => <LatestWritingsItem key={edge.node.id} post={edge.node} />)\n       \n    )}\n    \n  />\n)\n","import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `useStaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.dev/gatsby-image\n * - `useStaticQuery`: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nconst ImageFace = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      placeholderImage: file(relativePath: { eq: \"arttu_face_2019.jpg\" }) {\n        childImageSharp {\n          fluid(maxWidth: 300) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  `)\n\n  return <Img fluid={data.placeholderImage.childImageSharp.fluid}  />\n}\n\nexport default ImageFace\n"],"sourceRoot":""}