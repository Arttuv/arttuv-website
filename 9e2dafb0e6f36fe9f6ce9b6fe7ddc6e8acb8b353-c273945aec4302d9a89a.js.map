{"version":3,"sources":["webpack:///./src/components/gallery-article.js","webpack:///./src/components/writings-gallery.js","webpack:///./src/components/post-link.js","webpack:///./src/components/tag-image.js","webpack:///./src/components/tag-item.js","webpack:///./src/components/tags-component.js","webpack:///./src/components/latest-writings-item.js","webpack:///./src/components/latest-writings.js","webpack:///./src/components/seo.js","webpack:///./src/components/image-face.js"],"names":["GalleryArticle","post","className","to","frontmatter","path","title","summary","excerpt","tags","map","tag","key","kebabCase","date","fields","readingTime","text","featuredImage","sizes","childImageSharp","style","margin","width","query","render","data","allMarkdownRemark","edges","filter","edge","node","id","TagImage","tagName","console","log","fluid","hciPlaceholderImage","devPlaceholderImage","researchPlaceholderImage","TagComponent","tagCount","group","fieldValue","totalCount","LatestWritingsItem","SEO","description","image","article","pathname","useLocation","site","siteMetadata","defaultTitle","titleTemplate","defaultDescription","siteUrl","defaultImage","twitterUsername","seo","url","name","content","property","defaultProps","ImageFace","placeholderImage"],"mappings":"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","file":"9e2dafb0e6f36fe9f6ce9b6fe7ddc6e8acb8b353-c273945aec4302d9a89a.js","sourcesContent":["import React from \"react\"\nimport Img from \"gatsby-image\"\nimport { Link } from \"gatsby\"\nimport { BackgroundImage } from \"gatsby-background-image\"\nimport kebabCase from \"lodash/kebabCase\"\n\nconst GalleryArticle = ({ post }) => (\n\n  <article className=\"archive-article-item\">\n    <div>\n      \n      <Link to={post.frontmatter.path}>\n        <h3>{post.frontmatter.title}</h3>\n      </Link>\n      {post.frontmatter.summary !== null && (<p className=\"archive-article-item-summary\">{post.frontmatter.summary}</p>)} \n      {post.frontmatter.summary === null && (<p className=\"archive-article-item-summary\">{post.excerpt}</p>)} \n      \n      <div className=\"archive-article-item-summary-read-more\">\n      {post.frontmatter.tags !== null && ( \n          post.frontmatter.tags.map( tag => {\n            return <div className=\"archive-article-item-topic\" key={\"gallery-article-item-topic\" + tag}><Link to={`/tags/${kebabCase(tag)}/`}>\n                    {\"#\" + tag}\n                  </Link></div>\n          }))}\n\n      <span>\n        {post.frontmatter.date}\n        {\", \" + post.fields.readingTime.text}\n      </span>\n      </div>\n    </div>\n  \n    <div className=\"archive-article-item-image\">\n  \n      {post.frontmatter.featuredImage !== null && (\n        <Img \n            sizes={post.frontmatter.featuredImage.childImageSharp.sizes}\n            style={{margin: 'auto auto', width: '96px'}}\n          />\n      )}\n\n    </div>\n</article>\n)\nexport default GalleryArticle\n","import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\nimport PostLink from \"../components/post-link\"\nimport Layout from \"../components/layout\"\nimport GalleryArticle from \"./gallery-article\"\n\nexport default () => (\n  <StaticQuery\n    query={graphql`\n    query {\n        allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n          edges {\n            node {\n              id\n              excerpt(pruneLength: 250)\n              frontmatter {\n                date(formatString: \"MMMM DD, YYYY\")\n                path\n                title\n                tags\n                summary\n                featuredImage {\n                    childImageSharp {\n                        sizes(maxWidth: 250) {\n                        ...GatsbyImageSharpSizes\n                        }\n                    }\n                }\n              }\n              fields {\n                slug\n                readingTime {\n                  text\n                }\n              }\n            }\n          }\n        }\n      }     \n    `}\n\n    render={data => (\n                data.allMarkdownRemark.edges\n                    .filter(edge => !!edge.node.frontmatter.date) // You can filter your posts based on some criteria\n                    .map(edge => <GalleryArticle key={edge.node.id} post={edge.node} />)\n       \n    )}\n    \n  />\n)\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst PostLink = ({ post }) => (\n  <div>\n    <Link to={post.frontmatter.path}>\n      {post.frontmatter.title} ({post.frontmatter.date})\n    </Link>\n  </div>\n)\nexport default PostLink\n","import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `useStaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.dev/gatsby-image\n * - `useStaticQuery`: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nconst TagImage = ({tagName}) => {\n  const data = useStaticQuery(graphql`\n    query {\n      hciPlaceholderImage: file(relativePath: { eq: \"hci-placeholder.png\" }) {\n        childImageSharp {\n          fluid(maxWidth: 128) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n      devPlaceholderImage: file(relativePath: { eq: \"dev-placeholder.png\" }) {\n        childImageSharp {\n          fluid(maxWidth: 128) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n      researchPlaceholderImage: file(relativePath: { eq: \"research-placeholder.png\" }) {\n        childImageSharp {\n          fluid(maxWidth: 128) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  `)\n\n  return <div className=\"tag-image\">\n    {console.log(tagName)}\n    {tagName === 'hci' && \n      <Img fluid={data.hciPlaceholderImage.childImageSharp.fluid}  />\n    }\n    {tagName === 'dev' && \n      <Img fluid={data.devPlaceholderImage.childImageSharp.fluid}  />\n    } \n    {tagName === 'research' && \n      <Img fluid={data.researchPlaceholderImage.childImageSharp.fluid}  />\n    } \n    </div>\n}\n\nexport default TagImage\n","import React from \"react\"\nimport Img from \"gatsby-image\"\nimport { Link } from \"gatsby\"\nimport { BackgroundImage } from \"gatsby-background-image\"\nimport kebabCase from \"lodash/kebabCase\"\nimport TagImage from \"./tag-image\"\nconst TagComponent = ({ tagName, tagCount }) => (\n<div className=\"tag-item\" key={tagName}>\n    <TagImage tagName={tagName}/>\n    <div className=\"tag-link\">\n        <Link to={`/tags/${kebabCase(tagName)}/`}>\n            {tagName} ({tagCount})\n        </Link>\n    </div>\n</div>\n)\nexport default TagComponent\n","import React from \"react\"\n\nimport { graphql, StaticQuery } from \"gatsby\"\nimport TagComponent from \"./tag-item\"\n\nexport default () => (\n    <StaticQuery\n    query={graphql`\n    query {\n        allMarkdownRemark(limit: 2000) {\n          group(field: frontmatter___tags) {\n            fieldValue\n            totalCount\n          }\n        }\n      }\n    `}\n\n    render={data => (\n                data.allMarkdownRemark.group\n                    .map(edge => <TagComponent key={edge.fieldValue} tagName={edge.fieldValue} tagCount={edge.totalCount} />) \n    )}\n    \n  />\n)","import React from \"react\"\nimport Img from \"gatsby-image\"\nimport { Link } from \"gatsby\"\nimport { BackgroundImage } from \"gatsby-background-image\"\nimport kebabCase from \"lodash/kebabCase\"\n\nconst LatestWritingsItem = ({ post }) => (\n\n  <article className=\"latest-writings-item\" key={post.frontmatter.title}>\n    <div className=\"latest-writings-item-image\">\n    \n      {post.frontmatter.featuredImage !== null && (\n        <Img \n            sizes={post.frontmatter.featuredImage.childImageSharp.sizes}\n            style={{margin: 'auto auto', width: '128px'}}\n          />\n      )}\n\n    </div>\n      <div>\n        \n        <Link to={post.frontmatter.path}>\n          <h3>{post.frontmatter.title}</h3>\n        </Link>\n        {post.frontmatter.summary !== null && (<p className=\"latest-writings-item-summary\">{post.frontmatter.summary}</p>)} \n        {post.frontmatter.summary === null && (<p className=\"latest-writings-item-summary\">{post.excerpt}</p>)} \n        \n        <div className=\"latest-writings-item-summary-read-more\">\n        {post.frontmatter.tags !== null && ( \n          post.frontmatter.tags.map( tag => {\n            return <span key={\"link-to-\"+tag}><Link to={`/tags/${kebabCase(tag)}/`}>\n                    {\"#\" + tag}\n                  </Link></span>\n          }))\n          }\n            <span>\n              {post.frontmatter.date}\n              {\", \" + post.fields.readingTime.text}\n            </span>\n        </div>\n      </div>\n  </article>\n)\nexport default LatestWritingsItem\n","import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\nimport PostLink from \"../components/post-link\"\nimport Layout from \"../components/layout\"\nimport LatestWritingsItem from \"./latest-writings-item\"\n\nexport default () => (\n  <StaticQuery\n    query={graphql`\n    query {\n        allMarkdownRemark( limit: 2, sort: { order: DESC, fields: [frontmatter___date] }) {\n          edges {\n            node {\n              id\n              excerpt(pruneLength: 250)\n              frontmatter {\n                date(formatString: \"MMMM DD, YYYY\")\n                path\n                title\n                tags\n                summary\n                featuredImage {\n                    childImageSharp {\n                        sizes(maxWidth: 250) {\n                        ...GatsbyImageSharpSizes\n                        }\n                    }\n                }\n              }\n              fields {\n                slug\n                readingTime {\n                  text\n                }\n              }\n            }\n          }\n        }\n      }     \n    `}\n\n    render={data => (\n                data.allMarkdownRemark.edges\n                    .filter(edge => !!edge.node.frontmatter.date) // You can filter your posts based on some criteria\n                    .map(edge => <LatestWritingsItem key={edge.node.id} post={edge.node} />)\n       \n    )}\n    \n  />\n)\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useLocation } from \"@reach/router\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst SEO = ({ title, description, image, article }) => {\n  const { pathname } = useLocation()\n  const { site } = useStaticQuery(query)\n\n  const {\n    defaultTitle,\n    titleTemplate,\n    defaultDescription,\n    siteUrl,\n    defaultImage,\n    twitterUsername,\n  } = site.siteMetadata\n\n  const seo = {\n    title: title || defaultTitle,\n    description: description || defaultDescription,\n    image: `${siteUrl}${image || defaultImage}`,\n    url: `${siteUrl}${pathname}`,\n  }\n\n  return (\n    <Helmet title={seo.title} titleTemplate={titleTemplate}>\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"image\" content={seo.image} />\n\n      {seo.url && <meta property=\"og:url\" content={seo.url} />}\n\n      {(article ? true : null) && <meta property=\"og:type\" content=\"article\" />}\n\n      {seo.title && <meta property=\"og:title\" content={seo.title} />}\n\n      {seo.description && (\n        <meta property=\"og:description\" content={seo.description} />\n      )}\n\n      {seo.image && <meta property=\"og:image\" content={seo.image} />}\n\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n\n      {twitterUsername && (\n        <meta name=\"twitter:creator\" content={twitterUsername} />\n      )}\n\n      {seo.title && <meta name=\"twitter:title\" content={seo.title} />}\n\n      {seo.description && (\n        <meta name=\"twitter:description\" content={seo.description} />\n      )}\n\n      {seo.image && <meta name=\"twitter:image\" content={seo.image} />}\n    </Helmet>\n  )\n}\n\nexport default SEO\n\nSEO.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n  image: PropTypes.string,\n  article: PropTypes.bool,\n}\n\nSEO.defaultProps = {\n  title: null,\n  description: null,\n  image: null,\n  article: false,\n}\n\nconst query = graphql`\n  query SEO {\n    site {\n      siteMetadata {\n        defaultTitle: title\n        titleTemplate\n        defaultDescription: description\n        siteUrl: url\n        defaultImage: image\n        twitterUsername\n      }\n    }\n  }\n`","import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `useStaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.dev/gatsby-image\n * - `useStaticQuery`: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nconst ImageFace = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      placeholderImage: file(relativePath: { eq: \"arttu_face_2019.jpg\" }) {\n        childImageSharp {\n          fluid(maxWidth: 300) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  `)\n\n  return <Img fluid={data.placeholderImage.childImageSharp.fluid}  />\n}\n\nexport default ImageFace\n"],"sourceRoot":""}