{"version":3,"sources":["webpack:///./src/components/gallery-article.js","webpack:///./src/components/writings-gallery.js","webpack:///./src/components/post-link.js","webpack:///./src/components/tag-image.js","webpack:///./src/components/tag-item.js","webpack:///./src/components/tags-component.js","webpack:///./src/components/latest-writings-item.js","webpack:///./src/components/latest-writings.js","webpack:///./src/components/image-face.js"],"names":["GalleryArticle","post","className","to","frontmatter","path","title","summary","excerpt","tags","map","tag","key","kebabCase","date","fields","readingTime","text","featuredImage","sizes","childImageSharp","style","margin","width","query","render","data","allMarkdownRemark","edges","filter","edge","node","type","id","TagImage","tagName","console","log","fluid","hciPlaceholderImage","devPlaceholderImage","researchPlaceholderImage","TagComponent","tagCount","group","fieldValue","totalCount","LatestWritingsItem","ImageFace","placeholderImage"],"mappings":"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","file":"37ce59852b906bf8c4e88683da5bbc834f5beb51-0ba1974d816da6fc68b4.js","sourcesContent":["import React from \"react\"\nimport Img from \"gatsby-image\"\nimport { Link } from \"gatsby\"\nimport { BackgroundImage } from \"gatsby-background-image\"\nimport kebabCase from \"lodash/kebabCase\"\n\nconst GalleryArticle = ({ post }) => (\n\n  <article className=\"archive-article-item\">\n    <div>\n      <Link to={post.frontmatter.path}>\n        <h3>{post.frontmatter.title}</h3>\n      </Link>\n      {post.frontmatter.summary !== null && (<p className=\"archive-article-item-summary\">{post.frontmatter.summary}</p>)} \n      {post.frontmatter.summary === null && (<p className=\"archive-article-item-summary\">{post.excerpt}</p>)} \n      \n      <div className=\"archive-article-item-summary-read-more\">\n      {post.frontmatter.tags !== null && ( \n          post.frontmatter.tags.map( tag => {\n            return <div className=\"archive-article-item-topic\" key={\"gallery-article-item-topic\" + tag}><Link to={`/tags/${kebabCase(tag)}/`}>\n                    {\"#\" + tag}\n                  </Link></div>\n          }))}\n\n      <span>\n        {post.frontmatter.date}\n        {\", \" + post.fields.readingTime.text}\n      </span>\n      </div>\n    </div>\n  \n    <div className=\"archive-article-item-image\">\n  \n      {post.frontmatter.featuredImage !== null && (\n        <Img \n            sizes={post.frontmatter.featuredImage.childImageSharp.sizes}\n            style={{margin: 'auto auto', width: '96px'}}\n          />\n      )}\n\n    </div>\n</article>\n)\nexport default GalleryArticle\n","import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\nimport PostLink from \"../components/post-link\"\nimport Layout from \"../components/layout\"\nimport GalleryArticle from \"./gallery-article\"\n\nexport default () => (\n  <StaticQuery\n    query={graphql`\n    query {\n        allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n          edges {\n            node {\n              id\n              excerpt(pruneLength: 250)\n              frontmatter {\n                date(formatString: \"MMMM DD, YYYY\")\n                type\n                path\n                title\n                tags\n                summary\n                featuredImage {\n                    childImageSharp {\n                        sizes(maxWidth: 250) {\n                        ...GatsbyImageSharpSizes\n                        }\n                    }\n                }\n              }\n              fields {\n                slug\n                readingTime {\n                  text\n                }\n              }\n            }\n          }\n        }\n      }     \n    `}\n\n    render={data => (\n                data.allMarkdownRemark.edges\n                    .filter(edge => !!edge.node.frontmatter.date) // You can filter your posts based on some criteria\n                    .filter(edge => edge.node.frontmatter.type !== \"graphical-page\")\n                    .map(edge => <GalleryArticle key={edge.node.id} post={edge.node} />)\n       \n    )}\n    \n  />\n)\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst PostLink = ({ post }) => (\n  <div>\n    <Link to={post.frontmatter.path}>\n      {post.frontmatter.title} ({post.frontmatter.date})\n    </Link>\n  </div>\n)\nexport default PostLink\n","import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `useStaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.dev/gatsby-image\n * - `useStaticQuery`: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nconst TagImage = ({tagName}) => {\n  const data = useStaticQuery(graphql`\n    query {\n      hciPlaceholderImage: file(relativePath: { eq: \"hci-placeholder.png\" }) {\n        childImageSharp {\n          fluid(maxWidth: 128) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n      devPlaceholderImage: file(relativePath: { eq: \"dev-placeholder.png\" }) {\n        childImageSharp {\n          fluid(maxWidth: 128) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n      researchPlaceholderImage: file(relativePath: { eq: \"research-placeholder.png\" }) {\n        childImageSharp {\n          fluid(maxWidth: 128) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  `)\n\n  return <div className=\"tag-image\">\n    {console.log(tagName)}\n    {tagName === 'hci' && \n      <Img fluid={data.hciPlaceholderImage.childImageSharp.fluid}  />\n    }\n    {tagName === 'dev' && \n      <Img fluid={data.devPlaceholderImage.childImageSharp.fluid}  />\n    } \n    {tagName === 'research' && \n      <Img fluid={data.researchPlaceholderImage.childImageSharp.fluid}  />\n    } \n    </div>\n}\n\nexport default TagImage\n","import React from \"react\"\nimport Img from \"gatsby-image\"\nimport { Link } from \"gatsby\"\nimport { BackgroundImage } from \"gatsby-background-image\"\nimport kebabCase from \"lodash/kebabCase\"\nimport TagImage from \"./tag-image\"\nconst TagComponent = ({ tagName, tagCount }) => (\n<div className=\"tag-item\" key={tagName}>\n    <TagImage tagName={tagName}/>\n    <div className=\"tag-link\">\n        <Link to={`/tags/${kebabCase(tagName)}/`}>\n            {tagName} ({tagCount})\n        </Link>\n    </div>\n</div>\n)\nexport default TagComponent\n","import React from \"react\"\n\nimport { graphql, StaticQuery } from \"gatsby\"\nimport TagComponent from \"./tag-item\"\n\nexport default () => (\n    <StaticQuery\n    query={graphql`\n    query {\n        allMarkdownRemark(limit: 2000) {\n          group(field: frontmatter___tags) {\n            fieldValue\n            totalCount\n          }\n        }\n      }\n    `}\n\n    render={data => (\n                data.allMarkdownRemark.group\n                    .map(edge => <TagComponent key={edge.fieldValue} tagName={edge.fieldValue} tagCount={edge.totalCount} />) \n    )}\n    \n  />\n)","import React from \"react\"\nimport Img from \"gatsby-image\"\nimport { Link } from \"gatsby\"\nimport BackgroundImage from \"gatsby-background-image\"\nimport kebabCase from \"lodash/kebabCase\"\n\nconst LatestWritingsItem = ({ post }) => (\n\n  <article className=\"latest-writings-item\" key={post.frontmatter.title}>\n      <div>\n        <div className=\"latest-writings-item-image\">  \n        <Link className=\"latest-writings-item-title\" to={post.frontmatter.path}>\n          <h3>{post.frontmatter.title}</h3>\n        </Link>\n        </div>\n        <div>\n            <p className=\"latest-writing-item-date\">\n              <span className=\"highlight-color\">{post.frontmatter.date}</span>{\", \" + post.fields.readingTime.text}\n            </p>\n          </div>\n        {post.frontmatter.summary !== null && (<p className=\"latest-writings-item-summary\">{post.frontmatter.summary}</p>)} \n        {post.frontmatter.summary === null && (<p className=\"latest-writings-item-summary\">{post.excerpt}</p>)} \n        {post.frontmatter.featuredImage !== null && (\n            <Img \n                sizes={post.frontmatter.featuredImage.childImageSharp.sizes}\n                style={{margin: 'auto auto', width: '100%'}}\n              />\n            )}\n        <div className=\"latest-writings-item-summary-read-more\">\n\n          {post.frontmatter.tags !== null && ( \n            post.frontmatter.tags.map( tag => {\n              return <span key={\"link-to-\"+tag}><Link to={`/tags/${kebabCase(tag)}/`}>\n                      {\"#\" + tag}\n                    </Link></span>\n            }))\n          }\n\n        </div>\n      </div>\n  </article>\n)\nexport default LatestWritingsItem\n","import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\nimport PostLink from \"../components/post-link\"\nimport Layout from \"../components/layout\"\nimport LatestWritingsItem from \"./latest-writings-item\"\n\nexport default () => (\n  <StaticQuery\n    query={graphql`\n    query {\n        allMarkdownRemark( limit: 2, sort: { order: DESC, fields: [frontmatter___date] }) {\n          edges {\n            node {\n              id\n              excerpt(pruneLength: 250)\n              frontmatter {\n                date(formatString: \"MMMM DD, YYYY\")\n                type\n                path                \n                title\n                tags\n                summary\n                featuredImage {\n                    childImageSharp {\n                        sizes(maxWidth: 800) {\n                        ...GatsbyImageSharpSizes\n                        }\n                        fluid(maxWidth: 800, quality: 100) {\n                          ...GatsbyImageSharpFluid\n                          ...GatsbyImageSharpFluidLimitPresentationSize\n                          \n                        }\n                    }\n                    \n                }\n              }\n              fields {\n                slug\n                readingTime {\n                  text\n                }\n              }\n            }\n          }\n        }\n      }     \n    `}\n\n    render={data => (\n                data.allMarkdownRemark.edges\n                    .filter(edge => !!edge.node.frontmatter.date) // You can filter your posts based on some criteria\n                    .filter(edge => edge.node.frontmatter.type !== \"graphical-page\")\n                    .map(edge => <LatestWritingsItem key={edge.node.id} post={edge.node} />)\n       \n    )}\n    \n  />\n)\n","import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `useStaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.dev/gatsby-image\n * - `useStaticQuery`: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nconst ImageFace = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      placeholderImage: file(relativePath: { eq: \"arttu_face_2019.jpg\" }) {\n        childImageSharp {\n          fluid(maxWidth: 300) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  `)\n\n  return <Img fluid={data.placeholderImage.childImageSharp.fluid}  />\n}\n\nexport default ImageFace\n"],"sourceRoot":""}