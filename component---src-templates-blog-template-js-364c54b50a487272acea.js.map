{"version":3,"sources":["webpack:///./src/templates/blogTemplate.js","webpack:///./src/components/seo.js"],"names":["Template","markdownRemark","data","frontmatter","html","small","title","className","date","tags","map","tag","to","kebabCase","dangerouslySetInnerHTML","__html","href","pageQuery","SEO","description","image","article","pathname","useLocation","site","siteMetadata","defaultTitle","titleTemplate","defaultDescription","siteUrl","defaultImage","twitterUsername","seo","url","name","content","property","defaultProps"],"mappings":"knBAQe,SAASA,EAAT,GAEX,IACMC,EADP,EADDC,KAEQD,eACAE,EAAsBF,EAAtBE,YAAaC,EAASH,EAATG,KACrB,OACE,kBAAC,IAAD,CAAQC,MAAM,SACZ,kBAAC,IAAD,CAAKC,MAAOH,EAAYG,QACxB,yBAAKC,UAAU,uBACb,yBAAKA,UAAU,aACb,4BAAKJ,EAAYG,OACjB,6BACE,uBAAGC,UAAU,kBAAkBJ,EAAYK,KAA3C,IAAiD,6BAE3B,OAArBL,EAAYM,MACXN,EAAYM,KAAKC,KAAK,SAAAC,GACpB,OAAO,8BAAM,kBAAC,OAAD,CAAMC,GAAE,SAAWC,IAAUF,GAArB,KACZ,IAAMA,SAQrB,yBACEJ,UAAU,oBACVO,wBAAyB,CAAEC,OAAQX,OAIzC,yBAAKG,UAAU,mBACb,2bAGA,yFAC6D,uBAAGS,KAAK,8BAAR,oBAD7D,MAEE,uBAAGA,KAAM,8CAAgDb,EAAYG,OAArE,qBAFF,OASD,IAAMW,EAAS,a,+FCxChBC,EAAM,SAAC,GAA4C,IAA1CZ,EAAyC,EAAzCA,MAAOa,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QAChCC,EAAaC,wBAAbD,SAD8C,SAE9CE,KASCC,aANPC,EALoD,EAKpDA,aACAC,EANoD,EAMpDA,cACAC,EAPoD,EAOpDA,mBACAC,EARoD,EAQpDA,QACAC,EAToD,EASpDA,aACAC,EAVoD,EAUpDA,gBAGIC,EAAM,CACV1B,MAAOA,GAASoB,EAChBP,YAAaA,GAAeS,EAC5BR,MAAM,GAAIS,GAAUT,GAASU,GAC7BG,IAAI,GAAIJ,EAAUP,GAGpB,OACE,kBAAC,IAAD,CAAQhB,MAAO0B,EAAI1B,MAAOqB,cAAeA,GACvC,0BAAMO,KAAK,cAAcC,QAASH,EAAIb,cACtC,0BAAMe,KAAK,QAAQC,QAASH,EAAIZ,QAE/BY,EAAIC,KAAO,0BAAMG,SAAS,SAASD,QAASH,EAAIC,OAE/CZ,EAAiB,KAAS,0BAAMe,SAAS,UAAUD,QAAQ,YAE5DH,EAAI1B,OAAS,0BAAM8B,SAAS,WAAWD,QAASH,EAAI1B,QAEpD0B,EAAIb,aACH,0BAAMiB,SAAS,iBAAiBD,QAASH,EAAIb,cAG9Ca,EAAIZ,OAAS,0BAAMgB,SAAS,WAAWD,QAASH,EAAIZ,QAErD,0BAAMc,KAAK,eAAeC,QAAQ,wBAEjCJ,GACC,0BAAMG,KAAK,kBAAkBC,QAASJ,IAGvCC,EAAI1B,OAAS,0BAAM4B,KAAK,gBAAgBC,QAASH,EAAI1B,QAErD0B,EAAIb,aACH,0BAAMe,KAAK,sBAAsBC,QAASH,EAAIb,cAG/Ca,EAAIZ,OAAS,0BAAMc,KAAK,gBAAgBC,QAASH,EAAIZ,UAK7CF,MASfA,EAAImB,aAAe,CACjB/B,MAAO,KACPa,YAAa,KACbC,MAAO,KACPC,SAAS","file":"component---src-templates-blog-template-js-364c54b50a487272acea.js","sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport BlogPostSummary from \"../components/blog-post-summary\"\nimport { Link } from \"gatsby\"\nimport kebabCase from \"lodash/kebabCase\"\n\nexport default function Template({\n  data, // this prop will be injected by the GraphQL query below.\n}) {\n  const { markdownRemark } = data // data.markdownRemark holds your post data\n  const { frontmatter, html } = markdownRemark\n  return (\n    <Layout small=\"small\">\n      <SEO title={frontmatter.title} />\n      <div className=\"blog-post-container\">\n        <div className=\"blog-post\">\n          <h1>{frontmatter.title}</h1>\n          <div>\n            <p className=\"blog-post-date\">{frontmatter.date} <br />\n            \n            {frontmatter.tags !== null && ( \n              frontmatter.tags.map( tag => {\n                return <span><Link to={`/tags/${kebabCase(tag)}/`}>\n                        {\"#\" + tag}\n                  </Link></span>\n          }))\n          }\n            \n            \n            </p>\n          </div>\n          <div\n            className=\"blog-post-content\"\n            dangerouslySetInnerHTML={{ __html: html }}\n          />\n        </div>\n      </div>\n      <div className=\"commentsSection\">\n        <p>\n          No comments, huh? I haven't found an easy and non-intrusive way to implements comments. I mean, I don't want to add a comment system that tracks people visiting this site etc. That's unfortunate, because I'd like to discuss topics I'm writing about, because any given text is just my understanding of it at that moment. You'd definitely have something valuable to say that would enable me to learn something new. \n        </p>\n        <p>\n          If you found a mistake, disagree or would like to discuss, <a href=\"https://twitter.com/arttuv\">DM me on Twitter</a> or \n          <a href={\"mailto:arttu.viljakainen@gmail.com?subject=\" + frontmatter.title + \"\"}> send me an email</a>.\n        </p>\n      </div>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        path\n        title\n        tags\n        summary\n        featuredImage {\n            childImageSharp {\n                sizes(maxWidth: 250) {\n                ...GatsbyImageSharpSizes\n                }\n            }\n        }\n      }\n      fields {\n        slug\n        readingTime {\n          text\n        }\n      }\n    }\n  }\n`","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useLocation } from \"@reach/router\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst SEO = ({ title, description, image, article }) => {\n  const { pathname } = useLocation()\n  const { site } = useStaticQuery(query)\n\n  const {\n    defaultTitle,\n    titleTemplate,\n    defaultDescription,\n    siteUrl,\n    defaultImage,\n    twitterUsername,\n  } = site.siteMetadata\n\n  const seo = {\n    title: title || defaultTitle,\n    description: description || defaultDescription,\n    image: `${siteUrl}${image || defaultImage}`,\n    url: `${siteUrl}${pathname}`,\n  }\n\n  return (\n    <Helmet title={seo.title} titleTemplate={titleTemplate}>\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"image\" content={seo.image} />\n\n      {seo.url && <meta property=\"og:url\" content={seo.url} />}\n\n      {(article ? true : null) && <meta property=\"og:type\" content=\"article\" />}\n\n      {seo.title && <meta property=\"og:title\" content={seo.title} />}\n\n      {seo.description && (\n        <meta property=\"og:description\" content={seo.description} />\n      )}\n\n      {seo.image && <meta property=\"og:image\" content={seo.image} />}\n\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n\n      {twitterUsername && (\n        <meta name=\"twitter:creator\" content={twitterUsername} />\n      )}\n\n      {seo.title && <meta name=\"twitter:title\" content={seo.title} />}\n\n      {seo.description && (\n        <meta name=\"twitter:description\" content={seo.description} />\n      )}\n\n      {seo.image && <meta name=\"twitter:image\" content={seo.image} />}\n    </Helmet>\n  )\n}\n\nexport default SEO\n\nSEO.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n  image: PropTypes.string,\n  article: PropTypes.bool,\n}\n\nSEO.defaultProps = {\n  title: null,\n  description: null,\n  image: null,\n  article: false,\n}\n\nconst query = graphql`\n  query SEO {\n    site {\n      siteMetadata {\n        defaultTitle: title\n        titleTemplate\n        defaultDescription: description\n        siteUrl: url\n        defaultImage: image\n        twitterUsername\n      }\n    }\n  }\n`"],"sourceRoot":""}