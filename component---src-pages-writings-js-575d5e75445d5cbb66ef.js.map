{"version":3,"sources":["webpack:///./src/components/post-link.js","webpack:///./src/components/tag-image.js","webpack:///./src/components/tag-item.js","webpack:///./src/components/tags-component.js","webpack:///./src/components/latest-writings-item.js","webpack:///./src/components/all-writings.js","webpack:///./src/pages/writings.js"],"names":["TagImage","tagName","data","className","console","log","fluid","hciPlaceholderImage","childImageSharp","devPlaceholderImage","researchPlaceholderImage","TagComponent","tagCount","key","to","kebabCase","query","render","allMarkdownRemark","group","map","edge","fieldValue","totalCount","LatestWritingsItem","post","frontmatter","title","path","featuredImage","sizes","style","margin","width","summary","excerpt","tags","tag","date","fields","readingTime","text","edges","filter","node","id","WritingsPage"],"mappings":"68IAAA,qB,qJCwDeA,EAzCE,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACXC,EAAI,OA0BV,OAAO,yBAAKC,UAAU,aACnBC,QAAQC,IAAIJ,GACA,QAAZA,GACC,kBAAC,IAAD,CAAKK,MAAOJ,EAAKK,oBAAoBC,gBAAgBF,QAE1C,QAAZL,GACC,kBAAC,IAAD,CAAKK,MAAOJ,EAAKO,oBAAoBD,gBAAgBF,QAE1C,aAAZL,GACC,kBAAC,IAAD,CAAKK,MAAOJ,EAAKQ,yBAAyBF,gBAAgBF,UCnCjDK,EAVM,SAAC,GAAD,IAAGV,EAAH,EAAGA,QAASW,EAAZ,EAAYA,SAAZ,OACrB,yBAAKT,UAAU,WAAWU,IAAKZ,GAC3B,kBAAC,EAAD,CAAUA,QAASA,IACnB,yBAAKE,UAAU,YACX,kBAAC,OAAD,CAAMW,GAAE,SAAWC,IAAUd,GAArB,KACHA,EADL,KACgBW,EADhB,QCLO,sBACX,kBAAC,cAAD,CACAI,MAAK,aAWLC,OAAQ,SAAAf,GAAI,OACAA,EAAKgB,kBAAkBC,MAClBC,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAcR,IAAKQ,EAAKC,WAAYrB,QAASoB,EAAKC,WAAYV,SAAUS,EAAKE,iBAd1G,W,kCCNJ,2FAyCeC,IAnCY,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAEzB,6BAAStB,UAAU,uBAAuBU,IAAKY,EAAKC,YAAYC,OAC5D,6BACE,yBAAKxB,UAAU,8BACf,kBAAC,OAAD,CAAMA,UAAU,6BAA6BW,GAAIW,EAAKC,YAAYE,MAChE,4BAAKH,EAAKC,YAAYC,QAEc,OAAnCF,EAAKC,YAAYG,eACjB,kBAAC,IAAD,CACAC,MAAOL,EAAKC,YAAYG,cAAcrB,gBAAgBsB,MACtDC,MAAO,CAACC,OAAQ,YAAaC,MAAO,WAKT,OAA7BR,EAAKC,YAAYQ,SAAqB,uBAAG/B,UAAU,gCAAgCsB,EAAKC,YAAYQ,SACvE,OAA7BT,EAAKC,YAAYQ,SAAqB,uBAAG/B,UAAU,gCAAgCsB,EAAKU,SAEzF,yBAAKhC,UAAU,0CACY,OAA1BsB,EAAKC,YAAYU,MAChBX,EAAKC,YAAYU,KAAKhB,KAAK,SAAAiB,GACzB,OAAO,0BAAMxB,IAAK,WAAWwB,GAAK,kBAAC,OAAD,CAAMvB,GAAE,SAAWC,IAAUsB,GAArB,KACjC,IAAMA,OAIf,8BACGZ,EAAKC,YAAYY,KACjB,KAAOb,EAAKc,OAAOC,YAAYC,W,4qqDC7B/B,oBACb,kBAAC,cAAD,CACEzB,MAAK,YAuCLC,OAAQ,SAAAf,GAAI,OACAA,EAAKgB,kBAAkBwB,MAClBC,QAAO,SAAAtB,GAAI,QAAMA,EAAKuB,KAAKlB,YAAYY,QACvClB,KAAI,SAAAC,GAAI,OAAI,kBAAC,IAAD,CAAoBR,IAAKQ,EAAKuB,KAAKC,GAAIpB,KAAMJ,EAAKuB,WA3CjF,U,oCCkBaE,UAhBM,kBACnB,oCACE,kBAAC,IAAD,CAAKnB,MAAM,aACX,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAeA,MAAM,SACrB,yBAAKxB,UAAU,gBACb,kBAAC,IAAD,OAEF,kBAAC,IAAD,CAAewB,MAAM,aACrB,yBAAKxB,UAAU,mBACb,kBAAC,EAAD","file":"component---src-pages-writings-js-575d5e75445d5cbb66ef.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst PostLink = ({ post }) => (\n  <div>\n    <Link to={post.frontmatter.path}>\n      {post.frontmatter.title} ({post.frontmatter.date})\n    </Link>\n  </div>\n)\nexport default PostLink\n","import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `useStaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.dev/gatsby-image\n * - `useStaticQuery`: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nconst TagImage = ({tagName}) => {\n  const data = useStaticQuery(graphql`\n    query {\n      hciPlaceholderImage: file(relativePath: { eq: \"hci-placeholder.png\" }) {\n        childImageSharp {\n          fluid(maxWidth: 128) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n      devPlaceholderImage: file(relativePath: { eq: \"dev-placeholder.png\" }) {\n        childImageSharp {\n          fluid(maxWidth: 128) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n      researchPlaceholderImage: file(relativePath: { eq: \"research-placeholder.png\" }) {\n        childImageSharp {\n          fluid(maxWidth: 128) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  `)\n\n  return <div className=\"tag-image\">\n    {console.log(tagName)}\n    {tagName === 'hci' && \n      <Img fluid={data.hciPlaceholderImage.childImageSharp.fluid}  />\n    }\n    {tagName === 'dev' && \n      <Img fluid={data.devPlaceholderImage.childImageSharp.fluid}  />\n    } \n    {tagName === 'research' && \n      <Img fluid={data.researchPlaceholderImage.childImageSharp.fluid}  />\n    } \n    </div>\n}\n\nexport default TagImage\n","import React from \"react\"\nimport Img from \"gatsby-image\"\nimport { Link } from \"gatsby\"\nimport { BackgroundImage } from \"gatsby-background-image\"\nimport kebabCase from \"lodash/kebabCase\"\nimport TagImage from \"./tag-image\"\nconst TagComponent = ({ tagName, tagCount }) => (\n<div className=\"tag-item\" key={tagName}>\n    <TagImage tagName={tagName}/>\n    <div className=\"tag-link\">\n        <Link to={`/tags/${kebabCase(tagName)}/`}>\n            {tagName} ({tagCount})\n        </Link>\n    </div>\n</div>\n)\nexport default TagComponent\n","import React from \"react\"\n\nimport { graphql, StaticQuery } from \"gatsby\"\nimport TagComponent from \"./tag-item\"\n\nexport default () => (\n    <StaticQuery\n    query={graphql`\n    query {\n        allMarkdownRemark(limit: 2000) {\n          group(field: frontmatter___tags) {\n            fieldValue\n            totalCount\n          }\n        }\n      }\n    `}\n\n    render={data => (\n                data.allMarkdownRemark.group\n                    .map(edge => <TagComponent key={edge.fieldValue} tagName={edge.fieldValue} tagCount={edge.totalCount} />) \n    )}\n    \n  />\n)","import React from \"react\"\nimport Img from \"gatsby-image\"\nimport { Link } from \"gatsby\"\nimport BackgroundImage from \"gatsby-background-image\"\nimport kebabCase from \"lodash/kebabCase\"\n\nconst LatestWritingsItem = ({ post }) => (\n\n  <article className=\"latest-writings-item\" key={post.frontmatter.title}>\n      <div>\n        <div className=\"latest-writings-item-image\">  \n        <Link className=\"latest-writings-item-title\" to={post.frontmatter.path}>\n          <h3>{post.frontmatter.title}</h3>\n        </Link>\n          {post.frontmatter.featuredImage !== null && (\n           <Img \n           sizes={post.frontmatter.featuredImage.childImageSharp.sizes}\n           style={{margin: 'auto auto', width: '100%'}}\n         />\n          )}\n\n        </div>\n        {post.frontmatter.summary !== null && (<p className=\"latest-writings-item-summary\">{post.frontmatter.summary}</p>)} \n        {post.frontmatter.summary === null && (<p className=\"latest-writings-item-summary\">{post.excerpt}</p>)} \n        \n        <div className=\"latest-writings-item-summary-read-more\">\n        {post.frontmatter.tags !== null && ( \n          post.frontmatter.tags.map( tag => {\n            return <span key={\"link-to-\"+tag}><Link to={`/tags/${kebabCase(tag)}/`}>\n                    {\"#\" + tag}\n                  </Link></span>\n          }))\n          }\n            <span>\n              {post.frontmatter.date}\n              {\", \" + post.fields.readingTime.text}\n            </span>\n        </div>\n      </div>\n  </article>\n)\nexport default LatestWritingsItem\n","import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\nimport PostLink from \"../components/post-link\"\nimport Layout from \"../components/layout\"\nimport LatestWritingsItem from \"./latest-writings-item\"\n\nexport default () => (\n  <StaticQuery\n    query={graphql`\n    query {\n      allMarkdownRemark( sort: { order: DESC, fields: [frontmatter___date] }) {\n        edges {\n          node {\n            id\n            excerpt(pruneLength: 250)\n            frontmatter {\n              date(formatString: \"MMMM DD, YYYY\")\n              path\n              title\n              tags\n              summary\n              featuredImage {\n                  childImageSharp {\n                      sizes(maxWidth: 800) {\n                      ...GatsbyImageSharpSizes\n                      }\n                      fluid(maxWidth: 800, quality: 100) {\n                        ...GatsbyImageSharpFluid\n                        ...GatsbyImageSharpFluidLimitPresentationSize\n                        \n                      }\n                  }\n                  \n              }\n            }\n            fields {\n              slug\n              readingTime {\n                text\n              }\n            }\n          }\n        }\n      }\n    }     \n  `}\n\n    render={data => (\n                data.allMarkdownRemark.edges\n                    .filter(edge => !!edge.node.frontmatter.date) // You can filter your posts based on some criteria\n                    .map(edge => <LatestWritingsItem key={edge.node.id} post={edge.node} />)\n       \n    )}\n    \n  />\n)\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport PostLink from \"../components/post-link\"\nimport Layout from \"../components/layout\"\nimport AllWritings from \"../components/all-writings\"\nimport TagsComponent from \"../components/tags-component\"\nimport BorderedTitle from \"../components/bordered-title\"\nimport SEO from \"../components/seo\"\n\nconst WritingsPage = () => (\n  <>\n    <SEO title=\"Writings\" />\n    <Layout>\n      <BorderedTitle title=\"Tags\" />\n      <div className=\"archive-tags\">\n        <TagsComponent />\n      </div>    \n      <BorderedTitle title=\"Writings\" />\n      <div className=\"latest-writings\">\n        <AllWritings />\n      </div>\n    </Layout>\n    </>\n  )\n\nexport default WritingsPage"],"sourceRoot":""}