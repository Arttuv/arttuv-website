{"version":3,"sources":["webpack://gatsby-starter-default/./src/components/layout.js","webpack://gatsby-starter-default/./src/components/seo.js","webpack://gatsby-starter-default/./src/pages/research.js"],"names":["getClassNames","small","dark","classNames","children","data","useStaticQuery","name","className","siteTitle","site","siteMetadata","title","SEO","description","image","article","pathname","useLocation","query","defaultTitle","titleTemplate","defaultDescription","siteUrl","defaultImage","twitterUsername","seo","url","content","property","defaultProps"],"mappings":"iLAeA,SAASA,EAAcC,EAAOC,GAC5B,IAAIC,EAAaF,EAAQ,yBAA2B,0BAEpD,OADAE,GAAcD,EAAO,yBAA2B,0BAiClD,IA7Be,SAAC,GAA+B,IAA7BE,EAA4B,EAA5BA,SAAUH,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAC3BG,GAAOC,oBAAe,cAU5B,OACE,gCACE,qBAAGC,KAAK,QACR,uBAAKC,UAAW,oBAAsBR,EAAcC,EAAOC,IACzD,gBAAC,IAAD,CAAQO,UAAWJ,EAAKK,KAAKC,aAAaC,MAAOX,MAAOA,KAE1D,uBAAKO,UAAa,kBAChB,4BAAOJ,GACP,gBAAC,IAAD,CAAQK,UAAWJ,EAAKK,KAAKC,aAAaC,MAAOX,MAAOA,Q,8EC5B1DY,EAAM,SAAC,GAA4C,IAA1CD,EAAyC,EAAzCA,MAAOE,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QAChCC,GAAaC,mBAAbD,SAGR,GAFiBX,oBAAea,GAAxBT,KASCC,aANPS,EADF,EACEA,aACAC,EAFF,EAEEA,cACAC,EAHF,EAGEA,mBACAC,EAJF,EAIEA,QACAC,EALF,EAKEA,aACAC,EANF,EAMEA,gBAGIC,EAAM,CACVd,MAAOA,GAASQ,EAChBN,YAAaA,GAAeQ,EAC5BP,MAAM,GAAIQ,GAAUR,GAASS,GAC7BG,IAAI,GAAIJ,EAAUN,GAGpB,OACE,gBAAC,IAAD,CAAQL,MAAOc,EAAId,MAAOS,cAAeA,GACvC,wBAAMd,KAAK,cAAcqB,QAASF,EAAIZ,cACtC,wBAAMP,KAAK,QAAQqB,QAASF,EAAIX,QAE/BW,EAAIC,KAAO,wBAAME,SAAS,SAASD,QAASF,EAAIC,OAE/CX,EAAiB,KAAS,wBAAMa,SAAS,UAAUD,QAAQ,YAE5DF,EAAId,OAAS,wBAAMiB,SAAS,WAAWD,QAASF,EAAId,QAEpDc,EAAIZ,aACH,wBAAMe,SAAS,iBAAiBD,QAASF,EAAIZ,cAG9CY,EAAIX,OAAS,wBAAMc,SAAS,WAAWD,QAASF,EAAIX,QAErD,wBAAMR,KAAK,eAAeqB,QAAQ,wBAEjCH,GACC,wBAAMlB,KAAK,kBAAkBqB,QAASH,IAGvCC,EAAId,OAAS,wBAAML,KAAK,gBAAgBqB,QAASF,EAAId,QAErDc,EAAIZ,aACH,wBAAMP,KAAK,sBAAsBqB,QAASF,EAAIZ,cAG/CY,EAAIX,OAAS,wBAAMR,KAAK,gBAAgBqB,QAASF,EAAIX,UAK5D,MASAF,EAAIiB,aAAe,CACjBlB,MAAO,KACPE,YAAa,KACbC,MAAO,KACPC,SAAS,GAGX,IAAMG,EAAK,c,2ECzDX,UApBkB,SAAC,GAAD,EAAEd,KAAF,OAChB,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKO,MAAM,aACR","file":"component---src-pages-research-js-cdbcdf1670cf19ad621b.js","sourcesContent":["/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\";\nimport Footer from \"./footer\";\nimport \"./layout.css\"\n\nfunction getClassNames(small, dark) {\n  let classNames = small ? \"small-header-container\" : \"normal-header-container\";\n  classNames += dark ? \" dark-header-container\" : \" light-header-container\";\n  return classNames;\n}\n\nconst Layout = ({ children, small, dark }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n\n  return (\n    <>\n      <a name=\"top\"></a>\n      <div className={\"header-container \" + getClassNames(small, dark)}>\n        <Header siteTitle={data.site.siteMetadata.title} small={small}/>\n      </div>\n      <div className = {\"page-container\"}>\n        <main>{children}</main>\n        <Footer siteTitle={data.site.siteMetadata.title} small={small}/>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useLocation } from \"@reach/router\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst SEO = ({ title, description, image, article }) => {\n  const { pathname } = useLocation()\n  const { site } = useStaticQuery(query)\n\n  const {\n    defaultTitle,\n    titleTemplate,\n    defaultDescription,\n    siteUrl,\n    defaultImage,\n    twitterUsername,\n  } = site.siteMetadata\n\n  const seo = {\n    title: title || defaultTitle,\n    description: description || defaultDescription,\n    image: `${siteUrl}${image || defaultImage}`,\n    url: `${siteUrl}${pathname}`,\n  }\n\n  return (\n    <Helmet title={seo.title} titleTemplate={titleTemplate}>\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"image\" content={seo.image} />\n\n      {seo.url && <meta property=\"og:url\" content={seo.url} />}\n\n      {(article ? true : null) && <meta property=\"og:type\" content=\"article\" />}\n\n      {seo.title && <meta property=\"og:title\" content={seo.title} />}\n\n      {seo.description && (\n        <meta property=\"og:description\" content={seo.description} />\n      )}\n\n      {seo.image && <meta property=\"og:image\" content={seo.image} />}\n\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n\n      {twitterUsername && (\n        <meta name=\"twitter:creator\" content={twitterUsername} />\n      )}\n\n      {seo.title && <meta name=\"twitter:title\" content={seo.title} />}\n\n      {seo.description && (\n        <meta name=\"twitter:description\" content={seo.description} />\n      )}\n\n      {seo.image && <meta name=\"twitter:image\" content={seo.image} />}\n    </Helmet>\n  )\n}\n\nexport default SEO\n\nSEO.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n  image: PropTypes.string,\n  article: PropTypes.bool,\n}\n\nSEO.defaultProps = {\n  title: null,\n  description: null,\n  image: null,\n  article: false,\n}\n\nconst query = graphql`\n  query SEO {\n    site {\n      siteMetadata {\n        defaultTitle: title\n        titleTemplate\n        defaultDescription: description\n        siteUrl: url\n        defaultImage: image\n        twitterUsername\n      }\n    }\n  }\n`","import React from \"react\"\nimport { graphql } from 'gatsby'\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst IndexPage = ({data}) => (\n  <Layout>\n    <Seo title=\"Research\" />\n       <p>This page describes my research quite well.</p>\n    </Layout>\n)\n\nexport const query = graphql`\nquery {\n    fileName: file(relativePath: { eq: \"arttu_face_2019.jpg\" }) {\n      childImageSharp {\n        fluid(maxWidth: 400, maxHeight: 250) {\n          ...GatsbyImageSharpFluid_tracedSVG\n        }\n      }\n    }\n  }\n\n`\n\nexport default IndexPage\n\n"],"sourceRoot":""}